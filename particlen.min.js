function hexToRgb(hex){
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b){ return r+r+g+g+b+b; });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {r: parseInt(result[1],16), g: parseInt(result[2],16), b: parseInt(result[3],16)} : null;
}

function clamp(num, min, max) { return Math.min(Math.max(num, min), max); }
function isInArray(elem, array){ return array.indexOf(elem) > -1; }

var pJS = function(tag_id, params){
    var canvas_el = document.querySelector("#"+tag_id+" > .particles-js-canvas-el");
    this.pJS = {
        canvas: {el: canvas_el, w: canvas_el.offsetWidth, h: canvas_el.offsetHeight},
        particles: {
            number: {value: 100, density:{enable: true, value_area: 800}},
            color: {value: "#b30000"}, // maxviem crvena
            shape: {type: "circle", stroke:{width:0,color:"#b30000"}, polygon:{nb_sides:5}},
            opacity: {value:0.7, random:true},
            size: {value:5, random:true},
            line_linked: {enable:true, distance:120, color:"#b30000", opacity:0.4, width:1},
            move: {enable:true, speed:2, direction:"none", random:false, straight:false, out_mode:"out", bounce:false}
        },
        interactivity: {
            detect_on:"canvas",
            events:{onhover:{enable:true, mode:"grab"}, onclick:{enable:true, mode:"push"}, resize:true},
            modes:{
                grab:{distance:150, line_linked:{opacity:0.5}},
                bubble:{distance:200, size:8, duration:0.4},
                repulse:{distance:200, duration:0.4},
                push:{particles_nb:4},
                remove:{particles_nb:2}
            },
            mouse:{}
        },
        retina_detect: true
    };

    if(params) Object.deepExtend(this.pJS, params);

    // --- Init Functions ---
    this.pJS.fn = {};
    this.pJS.fn.retinaInit = function(){
        if(this.retina_detect && window.devicePixelRatio > 1){
            this.canvas.pxratio = window.devicePixelRatio;
        } else { this.canvas.pxratio = 1; }
        this.canvas.w = this.canvas.el.offsetWidth * this.canvas.pxratio;
        this.canvas.h = this.canvas.el.offsetHeight * this.canvas.pxratio;
    };

    this.pJS.fn.canvasInit = function(){ this.canvas.ctx = this.canvas.el.getContext("2d"); };
    this.pJS.fn.canvasSize = function(){
        this.canvas.el.width = this.canvas.w;
        this.canvas.el.height = this.canvas.h;
        var self = this;
        window.addEventListener("resize", function(){
            self.canvas.w = self.canvas.el.offsetWidth * self.canvas.pxratio;
            self.canvas.h = self.canvas.el.offsetHeight * self.canvas.pxratio;
            self.canvas.el.width = self.canvas.w;
            self.canvas.el.height = self.canvas.h;
        });
    };

    // --- Create Canvas ---
    this.pJS.fn.canvasInit();
    this.pJS.fn.retinaInit();
    this.pJS.fn.canvasSize();

    // --- Particle Constructor ---
    this.pJS.fn.particle = function(){
        var p = this;
        var particles = pJS.particles;

        p.radius = particles.size.random ? Math.random() * particles.size.value : particles.size.value;
        p.x = Math.random() * pJS.canvas.w;
        p.y = Math.random() * pJS.canvas.h;
        p.vx = (Math.random()-0.5) * particles.move.speed;
        p.vy = (Math.random()-0.5) * particles.move.speed;
        p.color = hexToRgb(particles.color.value);

        p.draw = function(){
            var ctx = pJS.canvas.ctx;
            ctx.fillStyle = "rgba("+p.color.r+","+p.color.g+","+p.color.b+", "+particles.opacity.value+")";
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.radius, 0, Math.PI*2, false);
            ctx.closePath();
            ctx.fill();
        };
    };

    // --- Create Particle Array ---
    this.pJS.fn.particlesCreate = function(){
        pJS.particles.array = [];
        for(var i=0; i<pJS.particles.number.value; i++){
            pJS.particles.array.push(new pJS.fn.particle());
        }
    };

    this.pJS.fn.particlesDraw = function(){
        var ctx = pJS.canvas.ctx;
        ctx.clearRect(0,0,pJS.canvas.w,pJS.canvas.h);
        for(var i=0;i<pJS.particles.array.length;i++){
            pJS.particles.array[i].draw();
        }
    };

    // --- Animation Loop ---
    var self = this;
    function animate(){
        self.pJS.fn.particlesDraw();
        requestAnimationFrame(animate);
    }

    this.pJS.fn.particlesCreate();
    animate();
};

// Helper for deep extend
Object.deepExtend = function(destination, source) {
    for (var property in source) {
        if (source[property] && source[property].constructor && source[property].constructor === Object){
            destination[property] = destination[property] || {};
            Object.deepExtend(destination[property], source[property]);
        } else { destination[property] = source[property]; }
    }
    return destination;
};
